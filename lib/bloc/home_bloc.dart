import 'dart:async';import 'package:bloc/bloc.dart';import 'package:equatable/equatable.dart';import 'package:tasksobes/db_service.dart';part 'home_event.dart';part 'home_state.dart';class HomeBloc extends Bloc<HomeEvent, HomeState> {  Repository repository = Repository();  HomeBloc() : super(const HomeState()) {    on<InitEvent>((event, emit) async {      List<Map> map = await repository.getAll();      print(map);      print(map);      print(map);      if (map.isEmpty) {        return emit(state.copyWith(history: map, status: HomeStatus.light));      }      var status = 1 == int.parse(map.last.keys.first.toString()) ? HomeStatus.light : HomeStatus.night;      emit(state.copyWith(history: map, status: status));    });    on<HomeChange>((event, emit) async {      List<Map> map = await repository          .getAll(); //var status = 1 == int.parse(map.last.keys.toString()) ? HomeStatus.light : HomeStatus      // .night;      print(event.status.index);      var status = event.status.index == 1 ? HomeStatus.night : HomeStatus.light;      print(event.status.index);      await repository.add(event.status.index + 1, event.time,);      emit(state.copyWith(history: map, status: status));    });  }}